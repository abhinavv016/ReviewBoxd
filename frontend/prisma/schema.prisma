generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(cuid())
  username  String      @unique
  email     String      @unique
  password  String?
  createdAt DateTime    @default(now())
  updateAt  DateTime    @updatedAt

  Watchlist Watchlist[]
  Watched   WatchedMovie[]
  Reviews Reviews[]
  ReviewReply ReviewReply[]
}

model Watchlist {
  id         String  @id @default(cuid())
  userId     String
  mediaId    String
  mediaType  String
  posterPath String?
  title      String
  media      Media   @relation(fields: [mediaId], references: [id])
  user       User    @relation(fields: [userId], references: [id])

  @@unique([userId, mediaId])
}

model Media {
  id         String      @id @default(cuid())
  title      String
  posterPath String?
  watchlists Watchlist[]
  watchedBy  WatchedMovie[]

  Reviews Reviews[]
}

model WatchedMovie {
  id         Int       @id @default(autoincrement())
  userId     String
  mediaId    String
  watchedAt  DateTime  @default(now())
  Reviews    Reviews[]
  liked      Boolean   @default(false)
  media      Media     @relation(fields: [mediaId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
  
  @@unique([userId, mediaId])
}

model Reviews {
  id             Int         @id @default(autoincrement())
  userId         String
  mediaId        String
  watchedMovieId Int?        
  content        String      
  rating         Int?        
  likedCount     Int         @default(0)
  replies        ReviewReply[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user           User        @relation(fields: [userId], references: [id])
  media          Media       @relation(fields: [mediaId], references: [id])
  watchedMovie   WatchedMovie? @relation(fields: [watchedMovieId], references: [id])

  @@unique([userId, mediaId])
}

model ReviewReply {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review    Reviews  @relation(fields: [reviewId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}